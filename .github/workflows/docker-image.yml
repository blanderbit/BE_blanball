on:
  push:

jobs:
  run_tests:
    runs-on: ubuntu-latest
    env:
      ENV_FILE: ${{ secrets.ENV_FILE }}
      PYTHON-VERSION: "3.10.7"
      POETRY-VERSION: "1.2.0"
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres_test
          POSTGRES_PASSWORD: postgres_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: "redis:7.0.4-alpine"
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@master
      with: 
        clean: 'false'
    - name: Set up Python $PYTHON-VERSION
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        pip install --upgrade pip
        pip install poetry==$POETRY-VERSION
    - name: Install deps
      run: |
        poetry run pip install -U pip 
        poetry install 
    - name: Run tests
      run: |
        echo $ENV_FILE | base64 --decode > .env
        cd project
        poetry run python3 manage.py makemigrations
        poetry run python3 manage.py migrate
        poetry run python3 manage.py test --no-input

  auto_deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@master
    - name: Set env vars (TEST)
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "DOCKERFILE_PATH=Dockerfile" >> $GITHUB_ENV
        echo "WEBHOOK=${{ secrets.PORTAINER_WEBHOOK_URL_TEST }}" >> $GITHUB_ENV
        echo "REGISTRY=${{ secrets.DOCKER_REGISTRY_TEST }}" >> $GITHUB_ENV
        echo "LATEST_IMAGE=${{ secrets.DOCKER_REGISTRY_TEST }}":latest >> $GITHUB_ENV
        echo "COMMIT_IMAGE=${{ secrets.DOCKER_REGISTRY_TEST }}":${{ github.sha }} >> $GITHUB_ENV
    - name: Set env vars (PROD)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "DOCKERFILE_PATH=Dockerfile" >> $GITHUB_ENV
        echo "REGISTRY=${{ secrets.DOCKER_REGISTRY_PROD }}" >> $GITHUB_ENV
        echo "WEBHOOK=${{ secrets.PORTAINER_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
        echo "LATEST_IMAGE=${{ secrets.DOCKER_REGISTRY_PROD }}":latest >> $GITHUB_ENV
        echo "COMMIT_IMAGE=${{ secrets.DOCKER_REGISTRY_PROD }}":${{ github.sha }} >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Pull latest image
      run: |
        docker pull ${LATEST_IMAGE} --ignore-pull-failures || true
    - name: Build image
      working-directory: .
      run: |
        docker build -f ${{ env.DOCKERFILE_PATH }} -t api --cache-from ${{ env.LATEST_IMAGE }} -t ${{ env.COMMIT_IMAGE }} .
    - name: Tag latest image
      run: |
        docker tag ${{ env.COMMIT_IMAGE }} ${{ env.LATEST_IMAGE }} 
    - name: Push images
      run: |
        docker push ${{ env.COMMIT_IMAGE }}
        docker push ${{ env.LATEST_IMAGE }}
        
    - name: Trigger deploy in portainer
      run: |
        curl -X POST ${{ env.WEBHOOK }} 