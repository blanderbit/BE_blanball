name: deploy

on: 
  push:
    branches:
      - develop
      - main
  workflow_dispatch:

jobs:
  run_tests:
    runs-on: ubuntu-latest
    env:
      ENV_FILE: ${{ secrets.ENV_FILE }}
      PYTHON_VERSION: 3.10.7
      POETRY_VERSION: 1.2.0
    services:
      db:
        image: postgis/postgis:latest 
        env:
          POSTGRES_USER: postgres_test
          POSTGRES_PASSWORD: postgres_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7.0.4-alpine
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@master
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install GDAL for geo django
      run: |
        sudo apt-get install -y gdal-bin libgdal-dev 
        sudo apt-get install -y python3-gdal 
        sudo apt-get install -y binutils libproj-dev
    - name: Install poetry
      run: |
        pip install --upgrade pip
        pip install poetry==${{ env.POETRY_VERSION }}
    - name: Configure poetry
      run: |
        python -m poetry config virtualenvs.in-project true

    - name: Cache the virtualenv
      uses: actions/cache@v2
      with:
        path: ./.venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
    - name: Install deps
      run: |
        poetry install
    - name: Run tests
      run: |
        echo $ENV_FILE | base64 --decode > .env
        cd project
        poetry run python3 manage.py migrate --noinput
        poetry run python3 manage.py test --no-input
  auto_deploy:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
    - uses: actions/checkout@master
    - name: Set env vars (TEST)
      if: contains(fromJson('["push"]'), github.event_name) && github.ref == 'refs/heads/develop' || contains(fromJson('["workflow_dispatch"]'), github.event_name)
      run: |
        echo "API_DOCKERFILE_PATH=Dockerfile" >> $GITHUB_ENV
        echo "WEBHOOK=${{ secrets.PORTAINER_WEBHOOK_URL_TEST }}" >> $GITHUB_ENV
        echo "REGISTRY=${{ secrets.DOCKER_REGISTRY_TEST }}" >> $GITHUB_ENV
        echo "LATEST_IMAGE=${{ secrets.DOCKER_REGISTRY_TEST }}":latest >> $GITHUB_ENV
        echo "COMMIT_IMAGE=${{ secrets.DOCKER_REGISTRY_TEST }}":${{ github.sha }} >> $GITHUB_ENV
    - name: Set env vars (PROD)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "API_DOCKERFILE_PATH=Dockerfile" >> $GITHUB_ENV
        echo "REGISTRY=${{ secrets.DOCKER_REGISTRY_PROD }}" >> $GITHUB_ENV
        echo "WEBHOOK=${{ secrets.PORTAINER_WEBHOOK_URL_PROD }}" >> $GITHUB_ENV
        echo "LATEST_IMAGE=${{ secrets.DOCKER_REGISTRY_PROD }}":latest >> $GITHUB_ENV
        echo "COMMIT_IMAGE=${{ secrets.DOCKER_REGISTRY_PROD }}":${{ github.sha }} >> $GITHUB_ENV
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Pull latest image (API)
      run: |
        docker pull ${{ env.LATEST_IMAGE }} --ignore-pull-failures || true
    - name: Build image (API)
      working-directory: .
      run: |
        docker build -f ${{ env.API_DOCKERFILE_PATH }} -t api --cache-from ${{ env.LATEST_IMAGE }} -t ${{ env.COMMIT_IMAGE }} .
    - name: Tag latest image (API)
      run: |
        docker tag ${{ env.COMMIT_IMAGE }} ${{ env.LATEST_IMAGE }} 
    - name: Push images (API)
      run: |
        docker push ${{ env.COMMIT_IMAGE }}
        docker push ${{ env.LATEST_IMAGE }}
    - name: Trigger deploy in portainer
      run: |
        curl -X POST ${{ env.WEBHOOK }}