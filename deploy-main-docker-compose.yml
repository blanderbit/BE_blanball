version: '3.8'

x-api-common: &api-common
    image: registry.it-flumx.com/flumx_blanball_be_prod:latest

    env_file:
        - stack.env
    entrypoint: scripts/entrypoint.sh

    depends_on:
        db-prod:
            condition: service_healthy
        redis-prod:
            condition: service_healthy
    networks:
        - registry_default
    links:
        - redis-prod

services:
    proxy-prod:
        container_name: proxy-prod
        env_file:
            - stack.env
        image: registry.it-flumx.com/blanball-proxy-prod:latest
        ports:
            - 49298:80
        networks:
            - registry_default
        depends_on:
            api-prod:
                condition: service_started

    api-prod:
        <<: *api-common
        container_name: api-prod
        command: api-deploy
        expose:
            - '8000'
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.api-prod.rule=Host(`api.blanball.com`) && PathPrefix(`/api`)'
            - 'traefik.http.routers.api-prod.entrypoints=websecure'
            - 'traefik.http.routers.api-prod.tls.certresolver=myresolver'
            - 'traefik.http.routers.api-prod.service=api-prod'
            - 'traefik.http.services.api-prod.loadbalancer.server.port=8000'

    daphne-prod:
        <<: *api-common
        container_name: daphne-prod
        command: daphne
        expose:
            - '10000'
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.daphne-prod.rule=Host(`api.blanball.com`) && PathPrefix(`/ws`)'
            - 'traefik.http.routers.daphne-prod.entrypoints=websecure'
            - 'traefik.http.routers.daphne-prod.tls.certresolver=myresolver'
            - 'traefik.http.routers.daphne-prod.service=daphne-prod'
            - 'traefik.http.services.daphne-prod.loadbalancer.server.port=10000'

    celery-worker-prod:
        <<: *api-common
        container_name: celery-worker-prod
        command: celery-worker

    celery-beat-prod:
        <<: *api-common
        container_name: celery-beat-prod
        command: celery-beat

    db-prod:
        container_name: db-prod
        env_file:
            - stack.env
        image: postgis/postgis:latest
        restart: always
        volumes:
            - db-data-prod:/var/lib/postgresql/data
        networks:
            - registry_default
        healthcheck:
            test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
            timeout: 5s
            retries: 20

    redis-prod:
        container_name: redis-prod
        env_file:
            - stack.env
        image: redis:latest
        restart: always
        volumes:
            - redis-data-prod:/usr/src/blanball/storage/redis-prod/data
        networks:
            - registry_default
        healthcheck:
            test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
            timeout: 3s
            retries: 5

    pgadmin-prod:
        container_name: pgadmin-prod
        env_file:
            - stack.env
        image: dpage/pgadmin4:latest
        restart: always
        volumes:
            - pgadmin-data-prod:/usr/src/blanball/storage/pgadmin-prod/data
        networks:
            - registry_default
        ports:
            - 49283:${PGADMIN_LISTEN_PORT}

    minio-prod:
        container_name: minio-prod
        env_file:
            - stack.env
        image: minio/minio
        volumes:
            - minio-data-prod:/minio-data-prod
        command: 'minio server /minio-data-prod --console-address ":9001" --address ":9000"'
        expose:
            - '9000'
            - '9001'
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.minio-prod.rule=Host(`storage.blanball.com`) && PathPrefix(`/`)"
            - "traefik.http.routers.minio-prod.entrypoints=websecure"
            - "traefik.http.routers.minio-prod.tls.certresolver=myresolver"
            - "traefik.http.routers.minio-prod.service=minio-prod"
            - "traefik.http.services.minio-prod.loadbalancer.server.port=9000"
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:9000/minio/health/live || exit 1"]
            interval: 30s
            timeout: 20s
            retries: 3
        networks:
            - registry_default

networks:
    registry_default:
        external: true

volumes:
    redis-data-prod:
    pgadmin-data-prod:
    db-backup-data-prod:
    minio-data-prod:
    db-data-prod: