version: "3.8"

services: 
  db:
    container_name: db
    image: "postgres:latest"
    env_file:
      - stack.env
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres -d postgres
      timeout: 40s
      retries: 20
    networks:
      - app-network
      
  api:
    container_name: api
    env_file:
      - stack.env
    image: registry.it-flumx.com/flumx_test_blanball_be_test:latest
    command: bash compose/local/django-start.sh
    ports:
      - "49200:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network    
    links:
     - redis
     
  redis:
    container_name: redis
    env_file:
      - stack.env
    image: redis:latest
    volumes:
      - redis-data:/usr/src/blanball/storage/redis/data
    networks:
      - app-network  
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 3s
      retries: 5

  celery-worker:
    env_file:
      - stack.env
    container_name: celery-worker
    image: registry.it-flumx.com/flumx_test_blanball_be_test:latest
    restart: always
    command: bash compose/local/celery-worker-start.sh
    networks:
      - app-network  
    depends_on:
      redis:
        condition: service_healthy

  celery-beat:
    env_file:
      - stack.env
    container_name: celery-beat
    image: registry.it-flumx.com/flumx_test_blanball_be_test:latest
    restart: always 
    command: bash compose/local/celery-beat-start.sh
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin
    env_file:
      - stack.env
    image: dpage/pgadmin4
    volumes:
      - pgadmin-data:/usr/src/blanball/storage/pgadmin/data
    ports:
      - "49270:80"
    networks:
      - app-network
    environment:
      PGADMIN_DEFAULT_EMAIL: gameonly1921@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin1921
      PGADMIN_CONFIG_SERVER_MODE: 'False'

  db_backup:
    container_name: db_backup
    env_file:
      - stack.env
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - db-backup-data:/usr/src/blanball/storage/db-backup/data
    networks:
      - app-network
    depends_on:
      db:
        condition: service_started
    
networks:
  app-network:
     driver: bridge    
     
volumes:
  redis-data:
  # pgadmin-data:
  db-backup-data: